
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Jul 06 22:57:45 CEST 2015
//----------------------------------------------------

package semantica;

import java_cup.runtime.*;
import lexico.JLex.*;
import errores.GestionErroresAnalisis;
import arbol.*;
import tipos.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Jul 06 22:57:45 CEST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\007\000\002\002\004\000\002\022" +
    "\004\000\002\022\003\000\002\023\007\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\004\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\006\005\000\002\020\003\000\002\011\003\000\002\017" +
    "\003\000\002\017\003\000\002\007\006\000\002\010\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\027\007\000\002\027" +
    "\011\000\002\030\005\000\002\030\003\000\002\031\007" +
    "\000\002\032\011\000\002\032\007\000\002\033\010\000" +
    "\002\040\012\000\002\041\006\000\002\041\005\000\002" +
    "\042\004\000\002\042\002\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\005\003\000\002\005\003\000\002\034\006\000" +
    "\002\035\003\000\002\036\003\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\004\005\001\002\000\004\002\207\001" +
    "\002\000\004\035\006\001\002\000\006\007\037\010\025" +
    "\001\002\000\004\032\012\001\002\000\006\032\ufffe\035" +
    "\006\001\002\000\004\032\uffff\001\002\000\004\030\014" +
    "\001\002\000\004\005\172\001\002\000\020\007\037\010" +
    "\025\022\017\024\021\043\041\044\032\046\023\001\002" +
    "\000\022\007\uffe9\010\uffe9\022\uffe9\024\uffe9\031\uffe9\043" +
    "\uffe9\044\uffe9\046\uffe9\001\002\000\022\007\uffec\010\uffec" +
    "\022\uffec\024\uffec\031\uffec\043\uffec\044\uffec\046\uffec\001" +
    "\002\000\012\041\053\046\023\047\046\050\044\001\002" +
    "\000\004\036\164\001\002\000\004\041\146\001\002\000" +
    "\004\046\137\001\002\000\046\006\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\023\uffef\027\uffef\033\ufff4\034\uffef\036\ufff4\037\uffef" +
    "\040\uffef\042\uffef\001\002\000\004\046\ufff3\001\002\000" +
    "\004\046\ufff1\001\002\000\004\031\136\001\002\000\022" +
    "\007\uffed\010\uffed\022\uffed\024\uffed\031\uffed\043\uffed\044" +
    "\uffed\046\uffed\001\002\000\022\007\037\010\025\022\017" +
    "\024\021\031\ufff6\043\041\044\032\046\023\001\002\000" +
    "\022\007\uffe7\010\uffe7\022\uffe7\024\uffe7\031\uffe7\043\uffe7" +
    "\044\uffe7\046\uffe7\001\002\000\004\041\127\001\002\000" +
    "\022\007\uffe8\010\uffe8\022\uffe8\024\uffe8\031\uffe8\043\uffe8" +
    "\044\uffe8\046\uffe8\001\002\000\022\007\uffea\010\uffea\022" +
    "\uffea\024\uffea\031\uffea\043\uffea\044\uffea\046\uffea\001\002" +
    "\000\004\006\114\001\002\000\022\007\uffee\010\uffee\022" +
    "\uffee\024\uffee\031\uffee\043\uffee\044\uffee\046\uffee\001\002" +
    "\000\004\046\ufff2\001\002\000\022\007\uffeb\010\uffeb\022" +
    "\uffeb\024\uffeb\031\uffeb\043\uffeb\044\uffeb\046\uffeb\001\002" +
    "\000\004\041\042\001\002\000\012\041\053\046\023\047" +
    "\046\050\044\001\002\000\040\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023" +
    "\uffc9\027\uffc9\034\uffc9\037\uffc9\040\uffc9\042\uffc9\001\002" +
    "\000\040\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\027\uffc3\034\uffc3" +
    "\037\uffc3\040\uffc3\042\uffc3\001\002\000\040\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\023\uffcc\027\uffcc\034\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\001\002\000\042\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\027" +
    "\uffc4\030\uffc4\034\uffc4\037\uffc4\040\uffc4\042\uffc4\001\002" +
    "\000\040\011\uffcf\012\076\013\077\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\027\uffcf\034\uffcf" +
    "\037\uffcf\040\uffcf\042\uffcf\001\002\000\034\011\uffd2\014" +
    "\074\015\073\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\027\uffd2\034\uffd2\037\uffd2\040\uffd2\042\uffd2\001\002\000" +
    "\040\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\023\uffca\027\uffca\034\uffca\037" +
    "\uffca\040\uffca\042\uffca\001\002\000\030\011\uffd7\016\uffd7" +
    "\017\uffd7\020\071\021\067\023\066\027\070\034\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\001\002\000\012\041\053\046\023" +
    "\047\046\050\044\001\002\000\040\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\023\uffc6\027\uffc6\034\uffc6\037\uffc6\040\uffc6\042\uffc6\001" +
    "\002\000\040\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\027\uffcb\034" +
    "\uffcb\037\uffcb\040\uffcb\042\uffcb\001\002\000\040\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\023\uffc7\027\uffc7\034\uffc7\037\uffc7\040\uffc7" +
    "\042\uffc7\001\002\000\004\033\107\001\002\000\010\016" +
    "\062\017\061\042\063\001\002\000\012\041\053\046\023" +
    "\047\046\050\044\001\002\000\012\041\053\046\023\047" +
    "\046\050\044\001\002\000\004\030\014\001\002\000\022" +
    "\007\uffe2\010\uffe2\022\uffe2\024\uffe2\031\uffe2\043\uffe2\044" +
    "\uffe2\046\uffe2\001\002\000\030\011\uffd9\016\uffd9\017\uffd9" +
    "\020\071\021\067\023\066\027\070\034\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\001\002\000\012\041\053\046\023\047\046" +
    "\050\044\001\002\000\012\041\053\046\023\047\046\050" +
    "\044\001\002\000\012\041\053\046\023\047\046\050\044" +
    "\001\002\000\012\041\053\046\023\047\046\050\044\001" +
    "\002\000\034\011\uffd6\014\074\015\073\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\027\uffd6\034\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\001\002\000\012\041\053\046\023\047\046" +
    "\050\044\001\002\000\012\041\053\046\023\047\046\050" +
    "\044\001\002\000\040\011\uffd1\012\076\013\077\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\027" +
    "\uffd1\034\uffd1\037\uffd1\040\uffd1\042\uffd1\001\002\000\012" +
    "\041\053\046\023\047\046\050\044\001\002\000\012\041" +
    "\053\046\023\047\046\050\044\001\002\000\040\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\023\uffcd\027\uffcd\034\uffcd\037\uffcd\040\uffcd" +
    "\042\uffcd\001\002\000\040\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\027\uffce\034\uffce\037\uffce\040\uffce\042\uffce\001\002\000" +
    "\040\011\uffd0\012\076\013\077\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\023\uffd0\027\uffd0\034\uffd0\037" +
    "\uffd0\040\uffd0\042\uffd0\001\002\000\034\011\uffd4\014\074" +
    "\015\073\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\027" +
    "\uffd4\034\uffd4\037\uffd4\040\uffd4\042\uffd4\001\002\000\034" +
    "\011\uffd5\014\074\015\073\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\027\uffd5\034\uffd5\037\uffd5\040\uffd5\042\uffd5" +
    "\001\002\000\034\011\uffd3\014\074\015\073\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\027\uffd3\034\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\001\002\000\030\011\uffd8\016\uffd8\017" +
    "\uffd8\020\071\021\067\023\066\027\070\034\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\001\002\000\012\041\053\046\023\047" +
    "\046\050\044\001\002\000\010\016\062\017\061\034\111" +
    "\001\002\000\040\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\027\uffc5" +
    "\034\uffc5\037\uffc5\040\uffc5\042\uffc5\001\002\000\010\016" +
    "\062\017\061\042\113\001\002\000\040\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\027\uffc8\034\uffc8\037\uffc8\040\uffc8\042\uffc8" +
    "\001\002\000\012\041\053\046\023\047\046\050\044\001" +
    "\002\000\006\033\107\036\120\001\002\000\010\011\117" +
    "\016\062\017\061\001\002\000\022\007\ufff0\010\ufff0\022" +
    "\ufff0\024\ufff0\031\ufff0\043\ufff0\044\ufff0\046\ufff0\001\002" +
    "\000\012\041\053\046\023\047\046\050\044\001\002\000" +
    "\004\037\125\001\002\000\012\016\062\017\061\037\uffe3" +
    "\040\123\001\002\000\012\041\053\046\023\047\046\050" +
    "\044\001\002\000\004\037\uffe4\001\002\000\004\011\126" +
    "\001\002\000\022\007\uffe5\010\uffe5\022\uffe5\024\uffe5\031" +
    "\uffe5\043\uffe5\044\uffe5\046\uffe5\001\002\000\012\041\053" +
    "\046\023\047\046\050\044\001\002\000\010\016\062\017" +
    "\061\042\131\001\002\000\004\030\014\001\002\000\024" +
    "\007\uffe0\010\uffe0\022\uffe0\024\uffe0\031\uffe0\043\uffe0\044" +
    "\uffe0\045\133\046\uffe0\001\002\000\004\030\014\001\002" +
    "\000\022\007\uffe1\010\uffe1\022\uffe1\024\uffe1\031\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\001\002\000\004\031\ufff7\001\002" +
    "\000\036\005\ufff8\007\ufff8\010\ufff8\022\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\031\ufff8\032\ufff8\035\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\001\002\000\014\011\ufff4\033\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\001\002\000\006\011\142\033\141" +
    "\001\002\000\004\047\046\001\002\000\022\007\ufff5\010" +
    "\ufff5\022\ufff5\024\ufff5\031\ufff5\043\ufff5\044\ufff5\046\ufff5" +
    "\001\002\000\004\034\144\001\002\000\004\011\145\001" +
    "\002\000\022\007\uffdf\010\uffdf\022\uffdf\024\uffdf\031\uffdf" +
    "\043\uffdf\044\uffdf\046\uffdf\001\002\000\004\046\147\001" +
    "\002\000\004\042\uffef\001\002\000\004\042\151\001\002" +
    "\000\004\030\152\001\002\000\004\025\154\001\002\000" +
    "\006\026\160\031\uffda\001\002\000\004\047\046\001\002" +
    "\000\004\030\014\001\002\000\010\025\154\026\uffdc\031" +
    "\uffdc\001\002\000\006\026\uffdd\031\uffdd\001\002\000\004" +
    "\030\014\001\002\000\004\031\162\001\002\000\022\007" +
    "\uffde\010\uffde\022\uffde\024\uffde\031\uffde\043\uffde\044\uffde" +
    "\046\uffde\001\002\000\004\031\uffdb\001\002\000\012\041" +
    "\053\046\023\047\046\050\044\001\002\000\004\037\166" +
    "\001\002\000\004\011\167\001\002\000\022\007\uffe6\010" +
    "\uffe6\022\uffe6\024\uffe6\031\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\001\002\000\010\011\171\016\062\017\061\001\002\000" +
    "\022\007\uffc2\010\uffc2\022\uffc2\024\uffc2\031\uffc2\043\uffc2" +
    "\044\uffc2\046\uffc2\001\002\000\004\002\001\001\002\000" +
    "\004\046\137\001\002\000\004\036\176\001\002\000\004" +
    "\030\014\001\002\000\006\007\037\010\025\001\002\000" +
    "\004\037\205\001\002\000\004\046\137\001\002\000\006" +
    "\037\ufffa\040\202\001\002\000\006\007\037\010\025\001" +
    "\002\000\004\037\ufffb\001\002\000\006\037\ufff9\040\ufff9" +
    "\001\002\000\004\030\ufffc\001\002\000\006\032\ufffd\035" +
    "\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\022\006\023\007\001\001\000\006\011\172\017\023" +
    "\001\001\000\002\001\001\000\006\022\010\023\007\001" +
    "\001\000\002\001\001\000\004\003\012\001\001\000\002" +
    "\001\001\000\036\004\025\006\026\007\035\010\034\011" +
    "\021\017\023\020\017\021\027\027\015\031\037\032\033" +
    "\033\014\037\032\040\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\054\010\042\012\167\013\051" +
    "\014\047\015\046\016\044\020\056\034\050\035\055\036" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\134\006\026\007\035\010\034\011\021\017\023\020" +
    "\017\021\027\027\015\031\037\032\033\033\014\037\032" +
    "\040\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\054\010\042\012\057\013\051\014\047" +
    "\015\046\016\044\020\056\034\050\035\055\036\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\054\010\042" +
    "\012\111\013\051\014\047\015\046\016\044\020\056\034" +
    "\050\035\055\036\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\054\010\042\013\105\014\047\015\046" +
    "\016\044\020\056\034\050\035\055\036\053\001\001\000" +
    "\026\005\054\010\042\013\064\014\047\015\046\016\044" +
    "\020\056\034\050\035\055\036\053\001\001\000\004\003" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\054\010\042\014\104\015\046\016\044\020\056\034" +
    "\050\035\055\036\053\001\001\000\024\005\054\010\042" +
    "\014\103\015\046\016\044\020\056\034\050\035\055\036" +
    "\053\001\001\000\024\005\054\010\042\014\102\015\046" +
    "\016\044\020\056\034\050\035\055\036\053\001\001\000" +
    "\024\005\054\010\042\014\071\015\046\016\044\020\056" +
    "\034\050\035\055\036\053\001\001\000\002\001\001\000" +
    "\022\005\054\010\042\015\101\016\044\020\056\034\050" +
    "\035\055\036\053\001\001\000\022\005\054\010\042\015" +
    "\074\016\044\020\056\034\050\035\055\036\053\001\001" +
    "\000\002\001\001\000\020\005\054\010\042\016\100\020" +
    "\056\034\050\035\055\036\053\001\001\000\020\005\054" +
    "\010\042\016\077\020\056\034\050\035\055\036\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\054\010\042\012\107\013\051" +
    "\014\047\015\046\016\044\020\056\034\050\035\055\036" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\054\010\042\012" +
    "\115\013\051\014\047\015\046\016\044\020\114\034\050" +
    "\035\055\036\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\054\010\042\012\121" +
    "\013\051\014\047\015\046\016\044\020\056\030\120\034" +
    "\050\035\055\036\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\054\010\042\012\121\013\051\014" +
    "\047\015\046\016\044\020\056\030\123\034\050\035\055" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\054\010\042\012\127\013\051" +
    "\014\047\015\046\016\044\020\056\034\050\035\055\036" +
    "\053\001\001\000\002\001\001\000\004\003\131\001\001" +
    "\000\002\001\001\000\004\003\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\152\001\001\000\004" +
    "\042\160\001\001\000\004\035\154\001\001\000\004\003" +
    "\155\001\001\000\004\041\156\001\001\000\002\001\001" +
    "\000\004\003\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\054\010\042\012\121" +
    "\013\051\014\047\015\046\016\044\020\056\030\164\034" +
    "\050\035\055\036\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\173\001\001\000\004" +
    "\024\174\001\001\000\004\003\205\001\001\000\012\011" +
    "\177\017\023\025\176\026\200\001\001\000\002\001\001" +
    "\000\004\020\203\001\001\000\002\001\001\000\012\011" +
    "\177\017\023\025\202\026\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   alex = (AnalizadorLexico)getScanner();
   errores = new GestionErroresAnalisis();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
	protected AnalizadorLexico alex;
	private GestionErroresAnalisis errores;
	public void syntax_error(Symbol unidadLexica) {
		errores.errorSintactico((UnidadLexica)unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= PROGRAMA DecFunciones BEGIN Bloque ENDPROGRAMA 
            {
              Programa RESULT =null;
		ArrayList<Funcion> dec = (ArrayList<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Programa(dec, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DecFunciones ::= Funcion DecFunciones 
            {
              ArrayList<Funcion> RESULT =null;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		ArrayList<Funcion> dec = (ArrayList<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 dec.add(0, f); RESULT = dec; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecFunciones",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DecFunciones ::= Funcion 
            {
              ArrayList<Funcion> RESULT =null;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ArrayList<Funcion>(); RESULT.add(f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecFunciones",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Funcion ::= FUNC Tipo Identificador Declaraciones Bloque 
            {
              Funcion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Declaraciones decs = (Declaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Funcion(id, decs, t, b); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Funcion",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= ANGULOAPERTURA ListaDecVariable ANGULOCIERRE 
            {
              Declaraciones RESULT =null;
		ArrayList<Declaracion> list = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Declaraciones(list); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaDecVariable ::= DeclaracionArgumento COMA ListaDecVariable 
            {
              ArrayList<Declaracion> RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		ArrayList<Declaracion> list = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 list.add(0, dec); RESULT = list; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaDecVariable",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaDecVariable ::= DeclaracionArgumento 
            {
              ArrayList<Declaracion> RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new ArrayList<Declaracion>(); RESULT.add(dec); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaDecVariable",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionArgumento ::= Tipo Identificador 
            {
              Declaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 	
					RESULT = new Declaracion( id, t); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionArgumento",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Bloque ::= BLOQUEAPERTURA Sentencias BLOQUECIERRE 
            {
              Bloque RESULT =null;
		ArrayList<Sentencia> ss = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
					RESULT = new Bloque(ss); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Bloque",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencias ::= Sentencia Sentencias 
            {
              ArrayList<Sentencia> RESULT =null;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		ArrayList<Sentencia> ss = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					ss.add(0, s); RESULT = ss; 
					s.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencias",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencias ::= Sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
				RESULT = new ArrayList<Sentencia>(); s.setFila(parser.alex.fila()); RESULT.add(s); 
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencias",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DecVariable ::= Tipo Identificador PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
						RESULT = new Declaracion( id, t); 
						RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DecVariable",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Identificador ::= ID 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Identificador",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= TipoBasico 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoBasico ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = TipoBasico.INT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoBasico",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoBasico ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBasico.BOOL; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoBasico",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asignacion ::= Variable IGUAL Expresion PUNTOCOMA 
            {
              Asignacion RESULT =null;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 	
					RESULT = new Asignacion( v, exp); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Asignacion",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= ID 
            {
              Variable RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
						RESULT = new Identificador(id); 
						RESULT.setFila(parser.alex.fila());
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Asignacion 
            {
              Sentencia RESULT =null;
		Asignacion as = (Asignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = as; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= DecVariable 
            {
              Sentencia RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= LlamadaFuncion 
            {
              Sentencia RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= While 
            {
              Sentencia RESULT =null;
		While w = (While)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = w; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= IfElse 
            {
              Sentencia RESULT =null;
		IfElse ifelse = (IfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ifelse; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia ::= DeclaracionArray 
            {
              Sentencia RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia ::= Return 
            {
              Sentencia RESULT =null;
		Return r = (Return)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = r; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia ::= Case 
            {
              Sentencia RESULT =null;
		Switch c = (Switch)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = c;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LlamadaFuncion ::= Identificador ANGULOAPERTURA ListaParametros ANGULOCIERRE PUNTOCOMA 
            {
              Llamada RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
						RESULT = new Llamada(id, list); 
						RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LlamadaFuncion ::= Variable IGUAL Identificador ANGULOAPERTURA ListaParametros ANGULOCIERRE PUNTOCOMA 
            {
              Llamada RESULT =null;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 
					RESULT = new Llamada(id, list, var); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaParametros ::= Expresion COMA ListaParametros 
            {
              ArrayList<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 list.add(0, exp);  RESULT = list; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListaParametros ::= Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // While ::= MIENTRAS PARENTESISAPERTURA Expresion PARENTESISCIERRE Bloque 
            {
              While RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new While(exp, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("While",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IfElse ::= SI PARENTESISAPERTURA Expresion PARENTESISCIERRE Bloque SINO Bloque 
            {
              IfElse RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Bloque bloqueIf = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Bloque bloqueElse = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new IfElse(exp, bloqueIf, bloqueElse); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfElse",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IfElse ::= SI PARENTESISAPERTURA Expresion PARENTESISCIERRE Bloque 
            {
              IfElse RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new IfElse(exp, bloque); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfElse",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DeclaracionArray ::= Tipo Identificador CORCHETEAPERTURA Entero CORCHETECIERRE PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Entero entero = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new Declaracion(id, new TipoArray(tipo, entero)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionArray",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Case ::= SWITCH PARENTESISAPERTURA Variable PARENTESISCIERRE BLOQUEAPERTURA SecuenciaCase DefaultOpt BLOQUECIERRE 
            {
              Switch RESULT =null;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		ArrayList<CaseBlock> casos = (ArrayList<CaseBlock>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Default def = (Default)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 	RESULT = new Switch( var, casos, def); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SecuenciaCase ::= CASE Entero Bloque SecuenciaCase 
            {
              ArrayList<CaseBlock> RESULT =null;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		ArrayList<CaseBlock> casos = (ArrayList<CaseBlock>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
		casos.add(0,new CaseBlock(ent,bloque));
		RESULT = casos;
	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SecuenciaCase",31, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SecuenciaCase ::= CASE Entero Bloque 
            {
              ArrayList<CaseBlock> RESULT =null;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
		RESULT = new ArrayList<CaseBlock>();
		RESULT.add(new CaseBlock(ent,bloque)); 
	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SecuenciaCase",31, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DefaultOpt ::= DEFAULT Bloque 
            {
              Default RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Default(bloque); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DefaultOpt",32, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DefaultOpt ::= 
            {
              Default RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DefaultOpt",32, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion OPERADOROR Expresion1 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Or(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion OPERADORAND Expresion1 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new And(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion1 ::= Expresion1 MAYOR Expresion2 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Mayor(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion1",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion1 ::= Expresion1 MENOR Expresion2 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Menor(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion1",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion1 ::= Expresion1 IGUALLOGICO Expresion2 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Igual(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion1",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion1 ::= Expresion1 DISTINTO Expresion2 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Distinto(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion1",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion1 ::= Expresion2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion1",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion2 ::= Expresion2 OPERADORMULTIPLICACION Expresion3 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Multiplicacion(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion2 ::= Expresion2 OPERADORDIVISION Expresion3 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Division(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion2 ::= Expresion3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion3 ::= Expresion3 OPERADORSUMA Expresion4 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Suma(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion3 ::= Expresion3 OPERADORRESTA Expresion4 
            {
              Expresion RESULT =null;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Expresion dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
					RESULT = new Resta(izq, dcha); 
					RESULT.setFila(parser.alex.fila());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion3 ::= Expresion4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion4 ::= TipoPrimitivo 
            {
              Expresion RESULT =null;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion4 ::= Array 
            {
              Expresion RESULT =null;
		Array array = (Array)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = array; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion4 ::= Variable 
            {
              Expresion RESULT =null;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = var; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion4 ::= PARENTESISAPERTURA Expresion PARENTESISCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TipoPrimitivo ::= Entero 
            {
              Expresion RESULT =null;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ent; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoPrimitivo",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TipoPrimitivo ::= Booleano 
            {
              Expresion RESULT =null;
		Booleano bool = (Booleano)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = bool; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TipoPrimitivo",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Array ::= Identificador CORCHETEAPERTURA Expresion CORCHETECIERRE 
            {
              Array RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Array(id, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Array",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Entero ::= ENTERO 
            {
              Entero RESULT =null;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Entero(Integer.parseInt(entero)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Entero",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Booleano ::= BOOLEANO 
            {
              Booleano RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Booleano(Boolean.parseBoolean(b)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Booleano",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Return ::= RETURN Expresion PUNTOCOMA 
            {
              Return RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Return(exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Return",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

